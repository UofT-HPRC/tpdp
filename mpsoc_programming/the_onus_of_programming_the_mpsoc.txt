One does not simply upload a bitstream.

The steps to reprogramming the MPSoC are frustratingly convoluted, and 
depend on many things being in place. This file is meant to help you 
deal with that.

Still though: prepare for great pain and suffering.

=====
TL;DR
=====

The list of commands I end up using:

#
-> On my computer
    $ scp <bitstream> mpsoc<index>:~/

-> On the MPSoC (done every time I have a new bitstream)
    $ sudo cp <bitstream> /lib/firmware/
    $ sudo su
    $ program <bitstream>

========
OVERVIEW 
========

First, you need to make sure your MPSoC is running Linux in the exact way Clark
set it up. From now on, I will make this assumption. I do not know how to get
this system working, but I do know it includes:
 
 - The drivers that allow reprogramming the FPGA
   
 - The driver used for setting the PS's output clocks (mpsoc_PSRegs.ko)
 
 - The mpsoc_axiregs.ko driver
 
 - (Optional) The XVC server, which allows remote access to ILAs
 

And if you plan to use the PS to PL communication... 

 - The pinner.ko and axidma.ko drivers. The source code, cross-compilation 
   instructions, and API documentation can be found at
   
   https://github.com/esophagus-now/mpsoc_axidma
   
   The code works in my own projects, but it's not battle-tested. Please come 
   find me if you're having trouble with it!
   

Programming the FPGA requires a .bin file (see next section). Once you've 
copied the .bin file over to the MPSoC, there are a few commands to run; see 
"Actually programming the FPGA".

I've also added quick sections on using ILAs. I also left the old PS-to-PL 
communication section, but this is just for completeness. 

Good luck!

=====================
GETTING THE .BIN FILE 
=====================

I don't know why, but the code in the Linux kernel needs the bitstream 
to be in a ".bin" format in order to reprogram the FPGA. (Apparently, 
.bin files are nothing more than address-data pairs.)

Anyway, making the .bin file just takes a single command: 

    $ bootgen -arch zynqmp -image specific.bif -o my_output.bin -w

(Make sure to  source the settings64.sh shell script in your Vivado install)

The bootgen command is used for a lot of things, and it expects an input  file 
with special syntax to tell it what to do (a .bif file). In the case of simply 
making a .bin, the specific.bif file you need is as follows:

	all: 
	{ 
		[destination_device = pl] my_bitstream.bit 
	}

Make sure my_bitstream.bit is in the same folder as the specific.bif 
file.


=============================
ACTUALLY PROGRAMMING THE FPGA 
=============================


PREREQUISITES
-------------

(Note: you don't have to read this; it's more of a checklist for when you're 
troubleshooting)

The following infrastructure should already be installed on the MPSoCs: 

    - Clark's Linux setup should have all the necessary drivers for PCAP 
      (PCAP is the name given to the hardened circuit in the PS which is 
      used for programming the FPGA fabric).

    - Clark and Camilo have created some bash commands which you will need. 
      These commands are in /root/.bash_aliases
            
      For reference, I have provided this file in
        
        helpful_scripts/mpsoc_bash_stuff/clarks_aliases
      
      Notice that there are three variations: clarks_aliases, camilos_aliases, 
      and marcos_aliases. They all do the same thing, just with different inner 
      workings. I have used Camilo's and my own aliases file with no problems, 
      but it's probably safest to use Clark's.
      
    - If using Camilo's aliases, you need /root/disablePci.sh. I have provided 
      this file in helpful_scripts/mpsoc_bash_stuff
      
    - (If using PS to PL) The pinner.ko and axidma.ko drivers from my repo at
      https://github.com/esophagus-now/mpsoc_axidma


INSTRUCTIONS
-------------

In order to program the FPGA, you will need to perform the following steps on 
the MPSoC. If you don't know how to ssh into your MPSoC, check 
sshing_into_the_mpsoc.txt in this folder

1. (If using PS to PL) Insert the pinner.ko and axidma.ko modules, if it hasn't 
   been done already. These files haven't been copied onto all the MPSoCs yet,
   so for now just come get me if you don't have them. For reference, they are
   the output files after compiling the source code in
   
   https://github.com/esophagus-now/mpsoc_axidma
   
   Note: there are special steps to get the cross-compiler to work. The above 
   repo should contain all the requisite information

2. Check if configfs is mounted. Basically, there should be a folder 
   called /configfs with some device tree stuff in it. If not, run:
    
   $ sudo su
   $ mountoverlay
   $ exit
   
   (You don't need to do this step if you use clark's or my aliases 
   file)

3. Copy your .bin file into /lib/firmware. You must do this, since only this 
   folder is searched when programming the bitstream.
   
   $ cp my.bin /lib/firmware/my.bin

4. After chaging to root, issue the set clocks command as: 
   
   $ sudo su
   $ set_clocks freq1 [freq2] [freq3] [freq4] 

   to match the CPU outputs clock frequencies you set in your block diagram. 
   The frequencies should be given in MHz, and you can safely round to the 
   nearest integer
   
	  NOTE: This is something the mpsoc_PSegs driver could take care of 
	  automatically, but I am still working on it

5. Without logging out of the root user account,

   $ sudo su
   $ program my.bin
   $ exit # Go back to unprivileged shell
   
   You can run this command from any folder, but please note that it will ONLY 
   search for the file "my.bin" in the "/lib/firmware" folder. It WILL NOT 
   search your current folder!

6. (If using PS-to-PL) Write the AXI DMA interrupt number and base address into 
   /sys/axidma/irq_line and /sys/axidma/phys_base, then write 1 into 
   /sys/axidma/enable. Further instructions on using this driver are provided in
   
   https://github.com/esophagus-now/mpsoc_axidma


==========
USING ILAS
==========

(This is a quick-and-dirty reference. A more full description can be 
found on our wiki.)

Again, I am assuming you are using the system that Clark has put in place. It 
should contain a program called "xvcserver". I have provided the source code 
for this program in mpsoc_programming/xvc_server. See that directory for more 
info.

Anyway, to use ILAs, you need to do the following:

1) Add a "debug bridge" IP to your design. Set it up in "AXI to BSCAN" 
   mode, and hook it up to the PS's AXI bus. For these instructions, I 
   will assume you mapped it to address 0xA0010000
   
2) For the love of all things holy save your .ltx file 
   (vivadoproj/runs/impl_1/thing.ltx) somewhere alongside your bitstream. If 
   not, then you will have a random bitstream with ILAs you can't use.
   
3) After programming the FPGA, run this command from inside the MPSoC:

   $ xvcserver -a 0xA0010000 -d

   This will start the XVC server on the MPSoC. Again, replace 0xA0010000 with 
   the debug bridge's base address in the address editor.
   
4) Use ssh to tunnel port 2542 from the MPSoC to whatever port you want 
   on your local computer. You can do this from inside a running SSH 
   session by hitting enter, then typing the ~ key, and hitting a 
   capital C. This will open a neat little command line for adding 
   tunnels. Alternatively, you could exit your SSH session and restart 
   with the -L 2542:localhost:2542 switch, as usual

5) Inside Vivado's hardware manager, do "open new target...". Connect 
   to local server, and click "Add Xilinx Virtual Cable". Use localhost 
   and whatever port you picked for the tunnel (I normally use 2542).

6) Make sure you ask Vivado to use the correct LTX file. I hope you 
   saved it! Because if you made a new bitstream, then the new LTX file 
   has overwritten the old one, and you are straight outta luck!
