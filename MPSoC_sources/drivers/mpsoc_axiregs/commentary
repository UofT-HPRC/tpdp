Here is how I made this file: 
	I copy pasted the mpsoc_axiregs.c file in here, indented it, then added 
	unindented text to explain what is going. I also added some background 
	information to make it easier to understand.

==========
BACKGROUND
==========

This driver's purpose is to allow userspace programs (without root privilege) 
to access devices in the FPGA that have registers in the PS's address space. 
This is performed by implementing an mmap call.

TODO: background on how mmap calls are implemented


====================
SOURCE WITH COMMENTS
====================

First we include a bunch of headers. To get access to these headers, you will 
need the Linux source tree. More detailed instructions can be found in 
linux_kernel_programming/compiling_mpsoc_modules.txt

	#include <linux/types.h>
	#include <linux/ioctl.h>
	#include <linux/kernel.h>
	#include <linux/module.h>
	#include <linux/version.h>
	#include <linux/miscdevice.h>
	#include <linux/mm.h>
	#include <linux/slab.h>
	#include <linux/poll.h>
	#include <asm/uaccess.h>

I don't know what this is for yet

	#define VMEM_FLAGS (VM_IO | VM_DONTEXPAND | VM_DONTDUMP)


Data internal to this driver. This is mostly used by the mmap implementation. 
When the device file is opened, one of these structs is allocated, and a 
poitner to it is saved in in the private_data member of the file struct. 

IMPORTANT: first, file structs are a bit of a misnomer. They don't represent 
files; they represent a file opened by a process. This means that even if 
several processes open the same file, they each their own file struct. (And in 
case you were wondering, it is inode structs which represent files)

	struct mpsoc_axireg_priv {
		wait_queue_head_t wq;
		unsigned int num_pages;
		char **page_ptr;
	};

Each process that opens our device file is associated with its own 
mpsoc_axireg_priv struct. So, we have to allocate a new one in the open 
function. As explained previously, we save a pointer to this struct in the 
private_data section of the file struct.

I don't know what waitqueues are about, I'll have to come back to that.

	static int mpsoc_axireg_open(struct inode *inode, struct file *filp)
	{
		struct mpsoc_axireg_priv *priv = (struct mpsoc_axireg_priv *) kzalloc(sizeof(struct mpsoc_axireg_priv), GFP_KERNEL);
		if (priv == NULL)
			return -ENOMEM;
		init_waitqueue_head(&priv->wq);
		filp->private_data = (void *) priv;
		printk(KERN_INFO "open MPSOC axi reg charactor device\n");
		return 0;
	}


The counterpart to the open function. I'm not exactly sure what's going on with 
free_page, but at least we can see that the mpsoc_axireg_priv struct is 
deallocated.

Just a quick thing: at no point is priv->num_pages ever set to anything other 
than 0. Also, at no point is the waitqueue used. Also, at no point is 
priv->page_ptr ever set or used. The entire private struct could probably be 
removed from this code.

	static int mpsoc_axireg_release(struct inode *inode, struct file *filp)
	{
		struct mpsoc_axireg_priv *priv = (struct mpsoc_axireg_priv *) filp->private_data;
		unsigned int i;
		for (i = 0; i < priv->num_pages; i++)
			free_page((unsigned long) priv->page_ptr[i]);
		if (priv->page_ptr)
			kfree(priv->page_ptr);
		kfree(priv);
		printk(KERN_INFO "close MPSOC axi reg charactor device\n");
		return 0;
	}

The implementation of the mmap function. This is tricky to write, since you 
have to have a bit of an understanding about how Linux manages memory pages and 
how virtual memory is implemented. Since I'm very shaky on these points, I'll 
have to do a little research and come back to this. Probably, I will write an 
entire text file just on explaining how to write your own mmap function.

UPDATE: I've started writing an mmap explanation file. You can find it in
linux_kernel_programming/basic_memory_management_and_mmap.txt. 

The main thing this function does is invoke io_remap_pfn_range. Essentially, 
this function instructs the Linux kernel to edit the page tables for the 
process that called the mmap function.

	static int mpsoc_axireg_mmap(struct file *filp, struct vm_area_struct *vma)
	{
		int rc;
		unsigned long off;
		unsigned long phys;
		unsigned long vsize;
		unsigned long psize;

		off = vma->vm_pgoff << PAGE_SHIFT;
		phys = 0xA0000000 + off;
		vsize = vma->vm_end - vma->vm_start;
		psize = vsize;
		vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);

		vma->vm_flags |= VMEM_FLAGS;
		rc = io_remap_pfn_range(vma, vma->vm_start, phys >> PAGE_SHIFT,
			vsize, vma->vm_page_prot);
		if (rc) return -EINVAL;
		return 0;
	}

This is your run-of-the-mill file operations struct. If you've never seen this 
before, check out driver_basics.txt where I do my best to explain the Linux VFS 
and how file operations are used.

	static struct file_operations mpsoc_axireg_fops = {
		.owner = THIS_MODULE,
		.open = mpsoc_axireg_open,
		.mmap = mpsoc_axireg_mmap,
		.release = mpsoc_axireg_release,
	};

We use the misc devices subsystem to register our driver. This eliminates a lot 
of the boilerplate you would normally need (i.e. allocating your own device 
numbers, manually registering the driver with the kernel, etc.)

The only things you need to give misc devices are
 1) which minor number you want. Or, since we don't care what number we get, we 
    pass MISC_DYNAMIC_MINOR to let the misc devices system choose one for us.
 2) The name of our driver
 3) Our file operations
 4) The permissions on our device files (Clark did this in the module init 
    function for some reason)

	struct miscdevice mpsoc_axireg_cdevsw = {
		MISC_DYNAMIC_MINOR,
		"mpsoc_axiregs",
		&mpsoc_axireg_fops,
	};

The module init function. Again, if you've never seen this before, refer to 
driver_basics.txt. All we need to do is register our miscdevice struct with the 
misc devices subsystem. Also, Clark set the file permissions mode member of the 
miscdev struct in this function for some reason.

	static int __init mpsoc_axireg_module_init(void)
	{
		mpsoc_axireg_cdevsw.mode = 0666;
		misc_register(&mpsoc_axireg_cdevsw);
		printk(KERN_INFO "MPSOC axi register driver is loaded\n");
		return 0;
	}

The module exit function. Simply unregisters our driver from the misc devices 
subsystem. 

(Question though: what happens if you try to remove the module when some 
processes have opened the device file? Potentially, the Linux kernel will 
automatically detect this and not let you remove the module. Otherwise, I think 
you need to somehow tell the kernel when it is or isn't safe for the module to 
be removed)

	static void __exit mpsoc_axireg_module_exit(void)
	{
		misc_deregister(&mpsoc_axireg_cdevsw);
		printk(KERN_INFO "MPSOC axi register driver is unloaded\n");
	}

These macros tell the KBuild system which functions are the init and exit 
methods.

	module_init(mpsoc_axireg_module_init);
	module_exit(mpsoc_axireg_module_exit);

And finally, set the license.

	MODULE_LICENSE("Dual BSD/GPL");
