====================
HLS STARTUP TUTORIAL
====================

Author: Juan Camilo Vega
Date: May 26 / 2020

The makers of HLS wanted to make a way to magically convert C code to 
Verilog but making that possible is still far away. For now there are three 
methods used for Verilog HLS development, they don't have official names 
but for simplicity I will call them: Verilog in C, C with Pragmas, and 
Hybrid.

Before we start, make sure to always include these libraries as they are 
very often needed for HLS

    #include "hls_stream.h"
    #include "ap_int.h"
    #include "ap_utils.h"


Verilog in C
============

For an example of this method check out this code I wrote: 

    https://github.com/UofT-HPRC/Latency_1_HLS_Switch/blob/master/switch.cpp 
    
It is a bit complex, maybe the hybrid examples are easier to understand

For Verilog in C we write a function in C that is to be converted to 
Verilog. The parameters specify what ports we want in the verilog where 
(and this is a bit hacky) ports with an & are output ports (such as 
ap_uint<7> &port_1) and ports without an & are input ports (such as 
ap_uint<6> port_2).  ap_uint<x> and ap_int<x> by the way is part of the 
ap_int library and it allows you to declare an unsigned or signed integer 
exactly x bits long. This is not supported in the CPU world but in hardware 
we want control over exactly how wide a port is.

Sample so far:

    #include "hls_stream.h"
    #include "ap_int.h"
    #include "ap_utils.h"
    void top_level_function
    (
      ap_uint<5> Unsigned_Input_port_of_5_bits,
      ap_int<7> Signed_Input_port_of_7_bits,
      ap_uint<512> &Unsigned_Output_port_of_512_bits
    )
    

Once you have declared your ports, you are ready to start writing the 
function. The first thing you write are top level pragmas. Pragmas are 
extra pieces of info you give the compiler to help you transform your code 
to verilog. Three types of pragma statements I almost always use are:

    #pragma HLS DATAFLOW 
    //Says that all functions can run concurrently which is useful when 
    //coding as verilog
    
    #pragma HLS INTERFACE ap_ctrl_none port=return 
    //By default the verilog will have a start input port and a finish
    //output port which is good for C with pragmas but for Verilog in C
    //or Hybrid we want it to always be "active" and this pragma does this
    
    #pragma HLS INTERFACE ap_none port=<port_name>
    //Ports have by default a bunch of useless output ports that are 
    //supposed to be for debug, this tells HLS they are not necessary
    //helping de-clutter the design

Now you are ready to write your code. In verilog we have wires and 
registers. In HLS local variables are treated like wires and static local 
variables like registers. Static variables therefore keep their values 
until overwritten for all time. Timing wise remember reading or writing to 
registers takes longer than with wires so a good strategy is at the start 
of the function you read a static to a non static and then at the end of 
the function you update the static variable if needed. Also and this is 
important, it should not be possible for a static variable to be accessed 
twice in execution with the exception of initialization. For statics you 
can initialize them by saying static ap_uint<5> reg = 4; where they are set 
to 4 at startup.

Here is sample code that, at every clock cycle, outputs the sum of the 
input value with a running value initialized as 0. Note that this was 
obtained by continuing the sample from earlier:

    #include "hls_stream.h"
    #include "ap_int.h"
    #include "ap_utils.h"
    void top_level_function
    (
        ap_int<32> input,
        ap_int<32> &output,
    )
    {
    #pragma HLS DATAFLOW 
    #pragma HLS INTERFACE ap_ctrl_none port=return 
    #pragma HLS INTERFACE ap_none port=input
    #pragma HLS INTERFACE ap_none port=output
    
        static ap_int<32> current_value = 0;//a register to hold our count
        
        ap_int<32> temp_value;//a wire so that we only read from current_value one and write to it once
        temp_value = current_value;
        
        output = temp_value + input; //set the output port (all ports are wires by the way);
        
        current_value = temp_value + input; //Update the register so that the next cycle it is updated
    }


Hybrid method
=============

The second useful way of writing HLS and really this is the only reason why 
HLS is easier is the hybrid way. HLS is really good in that you can easily 
create and use an AXI FULL memory channel or AXI Stream communication 
channels

I have many examples of HLS used this way found here: 
    
    https://github.com/UofT-HPRC/SHIP/tree/master/src/vhls

AXI Stream
----------
For AXI Stream, HLS lets you treat an AXI Stream Slave as a read only file 
(where reading takes the next flit on the AXI Stream communication line) 
and an AXI Stream Master as a write only file. This is nice because you 
don't have to deal with things like backpressure, HLS does that for you.

The best way to show you how to do it is with an example. I will repeat the 
above one but instead of reading and writing to a port I am going to get a 
value from an AXI Stream input and write it to an AXI Stream output. Note 
that this code also checks if there is a value on the input line and it 
does nothing if there is not. You can modify this to make a verilog that 
actively modifies a stream of data without "affecting it" (the throughput 
is unchanged)

    #include "hls_stream.h"
    #include "ap_int.h"
    #include "ap_utils.h"
    struct dataword
    {
        ap_uint<512> data;
        ap_uint<64> keep;
        ap_uint<1> last;
    };
    //In AXI Stream you create a struct with the sideband channels you need 
    //and their respective widths. Here we have data keep and last for 
    //demonstration purposes but you can use any combination of sideband 
    //signals (galapagos uses dest for example).
    //Valid and Ready, the backpressure signals, are handled internally so
    //you don't need to add them.
    
    void top_level_function
    (
        hls::stream<dataword>& input,
        //Declaration of an AXIS interface. Note Master and Slave have the
        //same declaration and HLS infers which one it is depending on if 
        //you read or write to the port
        
        hls::stream<dataword>& output,
    )
    {
    #pragma HLS DATAFLOW //Says that all functions can run concurrently which is useful when coding as verilog
    #pragma HLS INTERFACE ap_ctrl_none port=return //By default the verilog will have a start input port and a finish output port which is good for C with pragmas but for Verilog in C or Hybrid we want it to always be "active" and this pragma does this
    #pragma HLS resource core=AXI4Stream variable = input
    #pragma HLS DATA_PACK variable=input //These two are necessary for all HLS stream interfaces
    #pragma HLS resource core=AXI4Stream variable = output
    #pragma HLS DATA_PACK variable=output //These two are necessary for all HLS stream interfaces
    
       static ap_int<32> current_value = 0;//a register to hold our count
       
       ap_int<32> temp_value;//a wire so that we only read from current_value one and write to it once
       temp_value = current_value;
       
       dataword temp_data_in; //wires to get and put the value from the interface
       dataword temp_data_out;
       
       if (!input.empty() && !output.full()) //checks if the input has data available and the output is not backpressuring and can accept data (again so much easier than having to do this yourself in verilog)
       {
          temp_data_in = input.read();
          
          //We can individually assign each element in the struct
          temp_data_out.data = temp_data_in.data + temp_value; 
          temp_data_out.keep = temp_data_in.keep;//Lets pass the sidebands unchanged
          temp_data_out.last = temp_data_in.last;
          output.write(temp_data_out);
          
          current_value = current_value + temp_data_in.data;
       }
    }


AXI Full
--------

For AXI FULL, here's a good example I wrote:

    https://github.com/UofT-HPRC/SHIP/blob/master/src/vhls/data_storer.cpp

AXI full's protocol is not necessarily hard but it has 4 dozen signals so 
it is tedious but with HLS it is easy to do. You declare the output as a 
pointer and write to some offset of it. Things like memcpy also work to 
send out AXI Full bursts which you can check out.

Here is an example of code that writes the data coming in from AXI Stream 
to the memory and outputs the previous value of that memory on a master 
stream port. Here lets say that the user gives us the address to write in 
the tuser sideband channel and the data in the tdata channel. Note that 
since the memory is slow. The core will backpressure (not let data in) 
until the memory accesses are done so throughput is limited by memory 
bandwidth. Since each run takes more than one cycle you don't have to worry 
about things like temporary registers for your wires, HLS will deal with 
that in the background and you can just assume everything takes one cycle. 
Note that this code would have taken more than 1000 lines of verilog to 
write.

    #include "hls_stream.h"
    #include "ap_int.h"
    #include "ap_utils.h"
    struct dataword
    {
        ap_uint<512> data;
        ap_uint<32> user;
    };
    //In AXI Stream you create a struct with the sideband channels you need and their respective widths. Here we have data keep and last for demonstration purposes but you can use any combination of sideband signals (galapagos uses dest for example).
    //Valid and Ready, the backpressure signals, are handled internally so you don't need to add them.
    void top_level_function
    (
    hls::stream<dataword>& input,//Declaration of an AXIS interface. Note Master and Slave have the same declaration and HLS infers which one it is depending on if you read or write to the port
    hls::stream<dataword>& output,
    ap_uint<512> *mem //width can be whatever is convenient
    )
    {
    #pragma HLS DATAFLOW //Says that all functions can run concurrently which is useful when coding as verilog
    #pragma HLS INTERFACE ap_ctrl_none port=return //By default the verilog will have a start input port and a finish output port which is good for C with pragmas but for Verilog in C or Hybrid we want it to always be "active" and this pragma does this
    #pragma HLS resource core=AXI4Stream variable = input
    #pragma HLS DATA_PACK variable=input //These two are necessary for all HLS stream interfaces
    #pragma HLS resource core=AXI4Stream variable = output
    #pragma HLS DATA_PACK variable=output //These two are necessary for all HLS stream interfaces
    #pragma HLS INTERFACE ap_bus depth=1024 port=mem
    #pragma HLS resource variable=mem core=AXI4M//These two are necessary for HLS Memory accesses
       //There are no statics this time since each "run" is independant
       dataword temp_data_in; //wires to get and put the value from the interface
       dataword temp_data_out;
       ap_uint<512> old_data_read;
       ap_uint<32> address;
       if (!input.empty() && !output.full()) //checks if the input has data available and the output is not backpressuring and can accept data (again so much easier than having to do this yourself in verilog)
       {
          temp_data_in = input.read();
          address = temp_data_in.user / 64; //Since this synthesizes as C, it will notice mem is a pointer to 64 byte long element and it will multiply the address by this amount so we need to cancel it out, this is the same as CPU.
          temp_data_out.data = mem[address];//This does the AXI FULL read and it makes use of bursting and all the other stuff
          temp_data_out.user = temp_data_in.user;
          mem[address] = temp_data_in.data;//This does the AXI FULL write. HLS is smart enough to make sure this write happens after the previous read (it handles cache consistency!)
          output.write(temp_data_out);
       }
    }

AXI Registers
--------------
HLS also lets you have AXI memory mapped registers allowing another function 
to set or read values using the AXI memory bus. To do this, you declare the 
ports in the exact same way as before but you add a special pragma to specify 
that this port is a memory mapped register port.

Instead of using:
 #pragma HLS INTERFACE ap_none port=<port_name> 
 use:
 #pragma HLS resource variable=<port_name> core=AXI4LiteS metadata={-bus_bundle BUS_A}

Let us repeat the first example but instead of using physical ports
we will use memory mapped ports. Normally you can use a combination of the two

================================================================================

    #include "hls_stream.h"
    #include "ap_int.h"
    #include "ap_utils.h"
    void top_level_function
    (
        ap_int<32> input,
        ap_int<32> &output,
    )
    {
    #pragma HLS DATAFLOW 
    #pragma HLS INTERFACE ap_ctrl_none port=return 
     #pragma HLS resource variable=input core=AXI4LiteS metadata={-bus_bundle BUS_A}
     #pragma HLS resource variable=output core=AXI4LiteS metadata={-bus_bundle BUS_A}
    
        static ap_int<32> current_value = 0;//a register to hold our count
        
        ap_int<32> temp_value;//a wire so that we only read from current_value one and write to it once
        temp_value = current_value;
        
        output = temp_value + input; //set the output port (all ports are wires by the way);
        
        current_value = temp_value + input; //Update the register so that the next cycle it is updated
    }
=====================================================================

In the explorer tab you can get the addresses of each port in 
impl -> ip-> drivers -> <project name> ->src -> <some_name>.h

This file has a header that looks like this:

// BUS_A
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : reserved
// 0x14 : Data signal of BASE_ADDR_V
//        bit 31~0 - BASE_ADDR_V[31:0] (Read/Write)

In this case the port BASE_ADDR_V is at offset 0x14 within this IP.

C with pragmas
--------------

The third and certainly least (not a typo) method is C with pragmas. Here 
is where you write normal C code, fill it with pragmas to help it improve 
performance, and pray. Clark is much better than I am at getting this 
method to work with decent performance so I would ask him if this is 
something you want to do. In this case the lack of the dataflow pragma is 
used to tell HLS that this is your method. HLS tries to and fails at 
finding dependencies in your code to run things in parallel while 
guaranteeing functionality but it has so many false positives that 
performance is garbage unless you are really good with pragmas and manual 
reordering. These are all the pragmas you have at your disposal:

    https://www.xilinx.com/html_docs/xilinx2019_1/sdaccel_doc/hls-pragmas-okr1504034364623.html 
    
Doing State machines with the hybrid version + Real World Example of more complex HLS
======================================================================================

State machines in HLS are similar to state machines in C except now we have a
static variable (register) holding our current state and we have a bit of logic
which gets excecuted for each stage. This is efficiently achieved using switch
statements. 

Below is a more complex real-world example combining all the above lessons. It
is directly pulled from my research so please ask me if you have questions. This
is a state machine with 5 states each doing some processing and writing to
different cores. This core adds a header to a packet. The info for this header
comes from another AXI stream source (param_in) and from physical ports (which I
connect externally to constant blocks) (roce_flags). Adding another layer of
complexity while the incomming packet can be of any length, the outgoing packet
it can not be longer than 1344 bytes long (due to a physical limitation on the
output) so if the packet + the header does not fit, I need to output multiple
smaller packets and each of these subsequent packets have a slightly different
header. Also, since the header is not 512 bits long, adding it disaligns the
packet so I need to send a little bit from the last flit each cycle which I
store in a static (register) variable called old_data.

This example also makes use of .bit and .range methods of the ap_uint<x>
objects. These allow you to operate on or extract specific bits from a
ap_uint<x> bus which is imposible in CPUs but fully possible in hardware.
.range(a,b) takes the bits from high address a to low address b inclusive.
.bit(i) is the same as saying .range(i,i) when you are extracting a single bit.
Some other notes are bool in hls is taken as ap_uint<1> where true is 1 and
false is 0. Bools can be used in logical expressions.

=================================================================
#include "hls_stream.h"
#include "ap_int.h"
#include "ap_utils.h"

#define MAX_PACKET_LENGTH 1344
#define MAX_PAYLOAD_LENGTH (MAX_PACKET_LENGTH-0x40)
#define MAX_NUM_OF_BEATS MAX_PAYLOAD_LENGTH/64

#define WAITING_FOR_PARAM 0
#define WRITE_DATA_OFFSET_28 1
#define SENDING_LAST_OF_PACKET_28 2
#define SENDING_NEXT_PACKET 3
#define WRITE_DATA_OFFSET_12 4
#define SENDING_LAST_OF_PACKET_12 5

struct dataword
{
	ap_uint<512> data;
	ap_uint<64> keep;
	ap_uint<1> last;
};

struct parameters
{
	ap_uint<24> dest_qp;//the queue targeted
	ap_uint<24> packet_sequence_number;
	ap_uint<32> password;
	ap_uint<32> length;
};
//Parameters does not use the "normal" hls sidebands so hls will combine all of them into
//tdata of 112 bits and have no sideband channels. This struct must match in order to the 
//struct at the other core producing or receiving this so they both split the data in the same way

struct flags
{
	ap_uint<2> conjestion;//bit 0 is forward congestion, 1 is backwards congestion
	ap_uint<16> partition;//The partition that the dest QP is inside of
	ap_uint<1> solicited_event;//indicates the requester wants an acknowledgement when the work is done
	ap_uint<1> mig_req;//indicates migration state (1 => EE context has migrated)
	ap_uint<4> transport_header_version;//version of IBA transport
	ap_uint<1> ack_req;//indicates the requester wants an acknowledgement when the packet is received
};

void write_core
(
	flags roce_flags,//hls will automatically split up the struct to multiple input ports
	hls::stream<parameters> param_in,
	hls::stream<dataword> data_to_write,
	hls::stream<dataword> payload_out
)
{
#pragma HLS INTERFACE ap_ctrl_none port=return

#pragma HLS resource core=AXI4Stream variable = param_in
#pragma HLS DATA_PACK variable=param_in

#pragma HLS resource core=AXI4Stream variable = data_to_write
#pragma HLS DATA_PACK variable=data_to_write

#pragma HLS resource core=AXI4Stream variable = payload_out
#pragma HLS DATA_PACK variable=payload_out

	static ap_uint<8> stage = WAITING_FOR_PARAM;//state machine variable
    //declare wires and registers
	static ap_uint<8> num_of_reads = 0;
	dataword data_in_temp;
	dataword data_out_temp;
	static bool do_not_read = false;
	static parameters param_perm;
	static ap_uint<224> old_data=0;
	static ap_uint<28> old_keep=0;
	parameters param;
	switch (stage)
	{
	case WAITING_FOR_PARAM:
		if (!param_in.empty() && !data_to_write.empty() && !payload_out.full())
		{
			param = param_in.read();
			data_in_temp=data_to_write.read();
			num_of_reads = 2;
			if (param.length < MAX_PAYLOAD_LENGTH)
			{
                //Will it fit? The header needs to tell recepient
				data_out_temp.data.range(511,504) = 10;
			}
			else
			{
				data_out_temp.data.range(511,504) = 6;
			}
			data_out_temp.data.bit(503)= roce_flags.solicited_event;
			data_out_temp.data.bit(502)= roce_flags.mig_req;
			data_out_temp.data.range(501,500)=0;
			data_out_temp.data.range(499,496)=roce_flags.transport_header_version;
			data_out_temp.data.range(495,480)=roce_flags.partition;
			data_out_temp.data.range(479,478)=roce_flags.conjestion;
			data_out_temp.data.range(477,472)=0;
			data_out_temp.data.range(471,448)=param.dest_qp;
			data_out_temp.data.bit(447)=roce_flags.ack_req;
			data_out_temp.data.range(446,440)=0;
			data_out_temp.data.range(439,416)=param.packet_sequence_number;
			data_out_temp.data.range(415,352)=0;
			data_out_temp.data.range(351,320)=param.password;
			data_out_temp.data.range(319,288)=param.length;
			data_out_temp.data.range(287,0)=data_in_temp.data.range(511,224);
			old_data.range(223,0)= data_in_temp.data.range(223,0);
			old_keep.range(27,0)= data_in_temp.keep.range(27,0);
			data_out_temp.keep.range(63,36) = 0xfffffff;
			data_out_temp.keep.range(35,0) = data_in_temp.keep.range(63,28);
			if ((data_in_temp.last==1) && (data_in_temp.keep.range(27,0)==0))
			{
                //.last is 1 and the keep tells us the end of the flit (last 27 bytes) does not have useful data
				data_out_temp.last = 1;
				stage = WAITING_FOR_PARAM;
			}
			else if ((data_in_temp.last==1))
			{
                //.last is 1 and the keep tells us the end of the flit (last 27 bytes) does have useful data
                //We will not read next cycle the input but will write out the last little bit of old data
				data_out_temp.last = 0;
				do_not_read=true;
				stage = WRITE_DATA_OFFSET_28;
			}
			else
			{
                //.last is 0 so continue as usual
				data_out_temp.last=0;
				do_not_read=false;
				stage = WRITE_DATA_OFFSET_28;
			}
			payload_out.write(data_out_temp);
			param_perm = param;
		}
		break;
	case WRITE_DATA_OFFSET_28:
		if ((!data_to_write.empty() || do_not_read) && !payload_out.full())
		{
			if (do_not_read)
			{
                //The incoming packet is done but we have unwritten data in old_data
				data_in_temp.data = 0;
				data_in_temp.keep = 0;
				data_in_temp.last = 1;
			}
			else
			{
                //read the packet
				data_in_temp=data_to_write.read();
			}
			param_perm.length = param_perm.length - 64;
			data_out_temp.data.range(511,288)=old_data.range(223,0);
			data_out_temp.data.range(287,0)=data_in_temp.data.range(511,224);//All 0 if do_not_read is true
			data_out_temp.keep.range(63,36)=old_keep.range(27,0);
			data_out_temp.keep.range(35,0)=data_in_temp.keep.range(63,28);//All 0 if do_not_read is true
			if ((do_not_read)||((data_in_temp.last==1) && (data_in_temp.keep.bit(27)==0)))
			{
                //either do_not_read is true and this is the last little bit of data from old_data or
                //.last is 1 and the keep tells us the end of the flit (last 27 bytes) does not have useful data
				data_out_temp.last = 1;
				stage = WAITING_FOR_PARAM;
			}
			else if ((data_in_temp.last==1))
			{
                //The incoming packet is done but because the above case is not true then old_data still has useful
                //data inside of this so it is not the end for the output
				data_out_temp.last = 0;
				do_not_read=true;//we won't read next cycle, just send the last bit of old_data
				stage = WRITE_DATA_OFFSET_28;
			}
			else if (num_of_reads>=MAX_NUM_OF_BEATS)
			{
                //Packet is not done but our space is so we need to send out the last bit of old_data and end the packet
				data_out_temp.last = 0;
				stage = SENDING_LAST_OF_PACKET_28;
			}
			else
			{
                //Normal case, we stay here and keep sending out the packet
				data_out_temp.last = 0;
				do_not_read = false;
				stage = WRITE_DATA_OFFSET_28;
			}
            //Store old_keep and old_data for the future
			old_keep.range(27,0)=data_in_temp.keep.range(27,0);
			old_data.range(223,0)=data_in_temp.data.range(223,0);
            //Write out the output data packet
			payload_out.write(data_out_temp);
            //Update how many times we have written
			num_of_reads++;
		}
		break;
	case SENDING_LAST_OF_PACKET_28:
		if (!payload_out.full())
		{
            //Indicate the end of packet with the last bit of old data and go to the new packet state
			param_perm.length = param_perm.length - 64;
			data_out_temp.data.range(511,288)=old_data.range(223,0);
			data_out_temp.data.range(287,0)=0;
			data_out_temp.keep.range(63,36)=old_keep.range(27,0);
			data_out_temp.keep.range(35,0)=0;
			data_out_temp.last = 1;
			stage = SENDING_NEXT_PACKET;
			payload_out.write(data_out_temp);
		}
		break;
	case SENDING_NEXT_PACKET:
		if (!data_to_write.empty() && !payload_out.full())
		{
			//param = param_perm;
			data_in_temp=data_to_write.read();
			num_of_reads = 2;
			data_out_temp.data.bit(503)= roce_flags.solicited_event;
			data_out_temp.data.bit(502)= roce_flags.mig_req;
			data_out_temp.data.range(501,500)=0;
			data_out_temp.data.range(499,496)=roce_flags.transport_header_version;
			data_out_temp.data.range(495,480)=roce_flags.partition;
			data_out_temp.data.range(479,478)=roce_flags.conjestion;
			data_out_temp.data.range(477,472)=0;
			data_out_temp.data.range(471,448)=param_perm.dest_qp;
			data_out_temp.data.bit(447)=roce_flags.ack_req;
			data_out_temp.data.range(446,440)=0;
			data_out_temp.data.range(439,416)=param_perm.packet_sequence_number;
			data_out_temp.data.range(415,0)=data_in_temp.data.range(511,96);
			old_data.range(95,0)= data_in_temp.data.range(95,0);
			old_keep.range(11,0)= data_in_temp.keep.range(11,0);
			data_out_temp.keep.range(63,52) = 0xfff;
			data_out_temp.keep.range(51,0) = data_in_temp.keep.range(63,12);
			if (param_perm.length < MAX_PAYLOAD_LENGTH)
			{
                //Indicates to recepient this is not the first packet nor the last
				data_out_temp.data.range(511,504) = 8;
			}
			else
			{
                //Indicates to recepient this is the last packet but not the first
				data_out_temp.data.range(511,504) = 7;
			}
            //Same as above but now the header is smaller so now we look at the last 12 bytes of data
			if ((data_in_temp.last==1) && (data_in_temp.keep.bit(11)==0))
			{
				data_out_temp.last = 1;
				stage = WAITING_FOR_PARAM;
			}
			else if ((data_in_temp.last==1))
			{
				data_out_temp.last = 0;
				do_not_read=true;
				stage = WRITE_DATA_OFFSET_12;
			}
			else
			{
				data_out_temp.last=0;
				do_not_read=false;
				stage = WRITE_DATA_OFFSET_12;
			}
			payload_out.write(data_out_temp);
		}
		break;
	case WRITE_DATA_OFFSET_12:
        //Same as before but the shifting is a bit different
		if ((!data_to_write.empty() || do_not_read) && !payload_out.full())
		{
			param_perm.length = param_perm.length - 64;
			if (do_not_read)
			{
				data_in_temp.data = 0;
				data_in_temp.keep = 0;
				data_in_temp.last = 1;
			}
			else
			{
				data_in_temp=data_to_write.read();
			}
			data_out_temp.data.range(511,416)=old_data.range(95,0);
			data_out_temp.data.range(415,0)=data_in_temp.data.range(511,96);
			data_out_temp.keep.range(63,52)=old_keep.range(11,0);
			data_out_temp.keep.range(51,0)=data_in_temp.keep.range(63,12);
			if ((do_not_read)||((data_in_temp.last==1) && (data_in_temp.keep.range(11,0)==0)))
			{
				data_out_temp.last = 1;
				stage = WAITING_FOR_PARAM;
			}
			else if ((data_in_temp.last==1))
			{
				data_out_temp.last = 0;
				do_not_read=true;
				stage = WRITE_DATA_OFFSET_12;
			}
			else if (num_of_reads>=MAX_NUM_OF_BEATS)
			{
				data_out_temp.last = 0;
				stage = SENDING_LAST_OF_PACKET_12;
			}
			else
			{
				data_out_temp.last = 0;
				do_not_read = false;
				stage = WRITE_DATA_OFFSET_12;
			}
			old_keep.range(11,0)=data_in_temp.keep.range(11,0);
			old_data.range(95,0)=data_in_temp.data.range(95,0);
			payload_out.write(data_out_temp);
			num_of_reads++;
		}
		break;
	case SENDING_LAST_OF_PACKET_12:
		if (!payload_out.full())
		{
			param_perm.length = param_perm.length - 64;
			data_out_temp.data.range(511,416)=old_data.range(95,0);
			data_out_temp.data.range(415,0)=0;
			data_out_temp.keep.range(63,52)=old_keep.range(11,0);
			data_out_temp.keep.range(51,0)=0;
			data_out_temp.last = 1;
			stage = SENDING_NEXT_PACKET;
			payload_out.write(data_out_temp);
		}
		break;
	}
}
=================================================================================


EXPORTING YOUR HLS
===================

This method of HLS writing leads to a project being composed of many little HLS
scripts rather than one large one. You can stitch together the HLS scripts
alongside other IP cores in vivado integrator. First you need to tell HLS what
your top level function is. This can be done via Project -> Project Settings ->
Synthesis. Here you click browse and select the top level function. Next you can
apply solution settings via Solution -> Solution Settings where you can set a
bunch of parameters such as the anticipated clock rate, change part number, and
other options you should explore. Once you are done you can synthesize your code
using the green arrow which produces a report telling you the max clock speed,
the latency and Interval (how often the core can be run, ideally you want 0
which means it is always running), and resource usage. Hitting the yellow square
with four squares lets you export the HLS. Then in Vivado you can add an IP to
an IP repository or create an ip repository in the IP Catalog menu. The HLS IP
is located in <HLS_Folder>/solution1/impl/ip/<ip_name>.zip . You do not need to
extract the ZIP.


=======================
Challenge Problems
=======================

1. Create an HLS core with an input AXI Streaming port that has valid, ready, 
and 32 bit data (treated as unsigned). Read that value and update a 512 bit output
port with the running sum of the input streaming port.

2. Create your own GPIO which has 3 input and 3 output signals. Each signal 
should have a register address where writes set the output
signals and reads retreive the current input signal

3 . Create a 3 to 1 axi stream switch that arbitrates whenever the last signal is 1. 
Use fixed priority arbitration (e.g. if port 1 has data available it is always chosen 
otherwise choose port 2 and if it has no data choose port 3)
