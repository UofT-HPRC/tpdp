A while back I needed to work with LWIP, and I ended up writing a little text
file to explain it to myself. I have copied and pasted it here; note that I have
not edited it or even checked it for correctness.

Note that Daniel Rozhko has written a much better LWIP tutorial. I don't have it
at the moment, but at some point I'll find it and put it here

BEGIN COPIED FILE
-----------------

August 28, 2019 at 02:30 PM

Okay, a few words about using LWIP.

LWIP has this concept of a "network interface". Essentially, this is a data 
structure which records the address and MAC for an interface. It's actually up 
to you to write the drivers that move data between your hardware and the 
computer's memory, and then to invoke the interface's methods.

To be more specific: 
The interface's data is stored in a struct netif. Your driver will save 
incoming network data into a struct pbuf. Then you pretty much just do 
netif.input(pbuf), and this will call the functions to figure out the protocol 
and interpret the message accordingly.

More details:
The way it's done in the example project is to let the ISR save incoming 
packets into a pbuf, and keep a linked list of "unhandled pbufs". Then, in the 
main loop, we check if there are any pbufs in the list and if so, we do 
netif.input(pbuf). Also, if you want to use TCP, you need to call certain LWIP 
functions at regular intervals. To be specific, you need to call tcp_fasttmr() 
every 250 ms, and tcp_slowtmr() every 500 ms.

Important takeaways:
It's up to you to save the data, and to invoke the methods inside your 
interfaces, as well as to periodically invoke some TCP-related functions.

We need one more thing: the TCP API.

LWIP has this concept of a "process control block (pcb)". This is essentially 
the data structure which maintains the state of a TCP connection. Through a 
bunch of functions that are very similar to the sockets API, you eventually 
register some callbacks in LWIP's TCP system. Then, when you do 
netif.input(pbuf), or during a call to one of tcp_fasttmr() or tcp_slowtmr(), 
the TCP system will trigger one of your callbacks.

More details:

struct tcp_pcb *pcb = tcp_new_ip_type(IPADDR_TYPE_ANY) will create a pcb which 
is for both ipv4 and ipv6. At this point, the pcb is just "sitting there" and 
is not known to LWIP's TCP system.

tcp_bind(pcb, IP_ANY_TYPE, port) is the guy that "registers" the PCB with the 
TCP system. This is very similar to the bind() call in the sockets API.

Later we'll be supplying callbacks to the TCP system. These callbacks take a 
void* as one of their arguments, and you use tcp_arg(pcb, myvalue) to set the 
value that the TCP system will pass to that argument. That is, when the 
callback is called, myvalue will be passed as an argument.

Now we'll tell the TCP system that we want our pcb to be in the listening 
state. pcb = tcp_listen(pcb) will do the job, but you may be wondering why we 
replace pcb with the return value of tcp_listen(pcb). This is because 
tcp_listen will actually deallocate your original pcb and allocate a smaller 
one, since a pcb in the listening state does not need as much memory. 
Essentially, it's an optimization.

Finally, we can use tcp_accept(pcb, accept_callback) to set the function that 
will be called when a connection to that port is opened from an external host.
	Now we need to know how to write an accept callback. To be fair, you 
	can do whatever you want, but here's one way to do it:
	
	 - The prototype to the callback is err_t accept_callback(void *arg, 
	 struct tcp_pcb *newpcb, err_t err)
	
	 - As mentioned before, arg is set using tcp_arg
	
	 - newpcb is a newly allocated pcb which represents the newly opened 
	 connection. Your listening pcb is still there, and may yet accept a 
	 new connections
	
	 - Use tcp_recv(newpcb, recv_callback) to set the callback for when 
	 data is received.
	
		Okay... how do you write a receive callback?
		- The prototype is 
		  err_t recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
		- Again, arg is set with tcp_arg
		- p is the buffer containing the received data
		- I don't really know how to use err
		- In the example code, they check if p is NULL, and if so, they 
		  pcb_close(tpcb) and pcb_recv(tpcb, NULL), but I don't really 
		  understand why
		- The main feature is that you call pcb_recved(tpcb, len) to say 
		  that you read len bytes from the TCP connection. I don't know 
		  what happens if you don't read all the bytes in the pbuf, but 
		  I'll cross that bridge if I come to it.
		- Since you read out all the data, you can do pbuf_free(p). I 
		  don't know what you would do if you weren't done with it yet. 
		  IMPORTANT: pbuf_free is a lot more like destructing a shared 
		  pointer. It will decrement the reference count and only free 
		  the memory if the count reaches zero. Oddly, it has strange 
		  behaviour when it comes to chains of pbufs, and here is the 
		  comment in the LWIP source code that explains it: 
		  
			* Assuming existing chains a->b->c with the following 
			* reference counts, calling pbuf_free(a) results in:
			*
			* 1->2->3 becomes ...1->3
			* 3->3->3 becomes 2->3->3
			* 1->1->2 becomes ......1
			* 2->1->1 becomes 1->1->1
			* 1->1->1 becomes .......
		
		- IMPORTANT: if p is NULL, that means the connection has been 
		  closed. I'm not sure why they did it this way... why not just 
		  have a callback for when the connection is closed? But anyway, 
		  that's how you do it.
		
So, with that in mind, I should be able to just write an accept and receive 
callback that will correctly write new data into the code memory.

Actually, it may be even better to just modify the existing echo functions.

I need a few more things: how do you use pbufs?

August 28, 2019 at 03:16 PM

Of _course_ the pbufs are complicated.

Okay there's this VERY hacky thing about "pbuf chains" vs. "packet queues". A 
single packet may span many pbufs, so a struct pbuf has a next pointer in order 
to make a linked list. However, if you want to have a linked list of entire 
packets, you still use the next pointer. So how do you know if the pbuf pointed 
at by next is another packet or if it's just the next fragment of the current 
packet? The answer is with the the len and tot_len members. Essentially, 
tot_len is the nubmer of bytes remaining in the current packet, and len is the 
number of bytes in this pbuf. So if they're equal, the next pointer (which 
might be NULL) points to a new packet.

Another quick thing: the last argument to tcp_write is for selecting flags. If 
bit 0 (the least significant) is set, the data is copied into a local buffer 
somewhere. If it's not set, then it's up to you to ensure that data sticks 
around until it's actually sent.

So, the echo server could be more efficient if they used the tcp_sent callback 
mechanism to deallocate the pbufs after they are passed (without copying) to 
tcp_write.
